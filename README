Copyright (C) 2001 DeWitt Clinton  All Rights Reserved
     
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 1, or (at your option)
   any later version.
      
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.


NAME

  Cache::Cache

DESCRIPTION

  The Perl Cache package provides Cache::Cache, a generic interface
  for creating persistent data stores.  This interface is implemented
  by the Cache::FileCache, Cache::MemoryCache, and Cache::SharedMemoryCache
  classes.  This work replaces File::Cache and IPC::Cache.

REQUIREMENTS

  Data::Dumper
  Digest::MD5
  File::Spec
  File::Path
  IPC::Shareable

INSTALLATION

  perl Makefile.PL
  make
  make test
  make install


USAGE

  see perldoc Cache::Cache, Cache::FileCache, etc, but in general it
  is a simple as:



  use Cache::FileCache;  # or Cache::MemoryCache, etc.

  my $cache = new Cache::FileCache( ), # or Cache::MemoryCache, etc.

  my $key = 'foo';

  my $original_object = 'bar';

  $cache->set( $key, $original_object );

  my $fetched_object = $cache->get( $key );

  $fetched_object eq $original_object;



SEE ALSO

  File::Cache and IPC::Cache


NOTES

 * I am considering replacing Data::Dumper with Storable

 * I am considering removing the static methods (such as Purge, Clear,
   etc.) from the Cache interface.  Specific instances can implement those
   methods on a case by case basis

 * The full functionality of File::Cache is being ported to the 
   new implementation class Cache::ExtendedFileCache.  I wanted to 
   keep Cache::FileCache as simple as possible to allow it to be
   used as a starting point for new implementations

